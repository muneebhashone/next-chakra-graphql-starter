/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    emailAddress<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    emailAddress<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserInput: { // input type
    dob?: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    gender: NexusGenEnums['GENDER']; // GENDER!
    image?: string | null; // String
    name?: string | null; // String
    password: string; // String!
    phone?: string | null; // String
    username: string; // String!
  }
  UserUpdateInput: { // input type
    dob?: NexusGenScalars['DateTime'] | null; // DateTime
    gender?: NexusGenEnums['GENDER'] | null; // GENDER
    image?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
  }
}

export interface NexusGenEnums {
  GENDER: "FEMALE" | "MALE" | "OTHER"
  ROLE: "ADMIN" | "USER" | "VENDOR"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  EmailAddress: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  User: { // root type
    _id: string; // ID!
    active?: boolean | null; // Boolean
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    dob?: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    gender?: NexusGenEnums['GENDER'] | null; // GENDER
    image?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
    role: NexusGenEnums['ROLE']; // ROLE!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteUser: NexusGenRootTypes['User']; // User!
    updateUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    _id: string; // ID!
    active: boolean | null; // Boolean
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    dob: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    emailVerified: NexusGenScalars['DateTime'] | null; // DateTime
    gender: NexusGenEnums['GENDER'] | null; // GENDER
    image: string | null; // String
    name: string | null; // String
    phone: string | null; // String
    role: NexusGenEnums['ROLE']; // ROLE!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createUser: 'User'
    deleteUser: 'User'
    updateUser: 'User'
  }
  Query: { // field return type name
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    _id: 'ID'
    active: 'Boolean'
    createdAt: 'DateTime'
    dob: 'DateTime'
    email: 'String'
    emailVerified: 'DateTime'
    gender: 'GENDER'
    image: 'String'
    name: 'String'
    phone: 'String'
    role: 'ROLE'
    updatedAt: 'DateTime'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      data?: NexusGenInputs['UserInput'] | null; // UserInput
    }
    deleteUser: { // args
      id: string; // ID!
    }
    updateUser: { // args
      data?: NexusGenInputs['UserUpdateInput'] | null; // UserUpdateInput
      id: string; // String!
    }
  }
  Query: {
    user: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}